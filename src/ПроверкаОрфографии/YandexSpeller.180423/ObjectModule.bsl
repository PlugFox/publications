#Область Yandex_speller 
// ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~
//						Yandex speller 
// ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~
// Проверка орфографии средствами Yandex speller через HTTP GET
// https://tech.yandex.ru/speller/doc/dg/concepts/speller-overview-docpage/
//
// Функция возвращает структуру со следующими парами Ключ-Значение:
//	БезОшибок, КоличествоОшибок, ИсходныйТекст, ИсправленныйТекст, ШаблонТекста, Ошибки
//	БезОшибок (булево)			- Текст не содержит/содержит ошибки.
//	КоличествоОшибок (число)	- Количество ошибок в тексте
//	ИсходныйТекст (строка)		- Текст переданый в функцию
//	ИсправленныйТекст (строка)	- Текст с исправленными ошибками (ошибки заменены на первую подсказку)
//	ШаблонТекста				- Текст в котором места ошибок обрамлены в "<err!>ИндексОшибки</err!>" 
//	Ошибки (массив структур)	- Состоит из КодОшибки (число), 
//									ОписаниеОшибки (строка), ПозицияСлова (число), НомерСтроки (число), 
//									НомерСтолбца (число), ДлинаСлова (число), Подсказки (массив строк) 
// В случае неудачи функция возвращает "Неопределено" и выводит сообщение об ошибке.
//
// Параметры:
//	Текст						- [обязательный](строка)
//								параметром передается текст на проверку
//	Язык						- [необязательный](строка)
//								Языки проверки (перечисляются через запятую).
//								Возможные значения:
//									ru – русский;
//									uk – украинский;
//									en – английский.
//								По умолчанию: "ru,en".
//	Опции						- [необязательный](число)
//								Опции Яндекс.Спеллера.
//								Значением параметра является сумма значений требуемых опций,
//								см. https://tech.yandex.ru/speller/doc/dg/reference/speller-options-docpage/
//								Например, Опции = 5 - это сумма опций IGNORE_UPPERCASE и IGNORE_URLS.
//								По умолчанию Опции = 31 (IGNORE_UPPERCASE, IGNORE_DIGITS, IGNORE_URLS, FIND_REPEAT_WORDS, IGNORE_LATIN).								
//	Формат						- [необязательный](строка)
//								Формат проверяемого текста.
//								Возможные значения:
//									plain - текст без разметки (значение по умолчанию)
//								    html - HTML-текст.
//	ИсправлятьИсходныйТекст		- [необязательный](булево) 
//								если Истина, то исходный текст исправляется
//								может быть полезно, если использовать как процедуру и возвращать первый параметр "Текст".
//								По умолчанию Ложь.
//	СообщатьОбОшибках			- [необязательный](булево) 
//								если Истина (значение по умолчанию), то будут выводиться сообщения об ошибках
//	Словарь						- [необязательный](строка) 
//								если заданы метаданные словаря (вида: "Справочник.Словарь"), 
//								то будут исключаться из ошибочных слова содержащиеся в наименованиях справочника "Словарь".
//								Если передана строка с разделителями ";", 
//								то вместо справочника словаря будет использоваться она.
//								По умолчанию пустая строка.
//	МинДлинаСлова				- [необязательный](число) 
//								минимальная длина слова подлежащего проверке
//								По умолчанию 0 (проверять все слова).
Функция YandexSpeller(	Текст, 
						Знач Язык						= "ru,en", 
						Знач Опции						= 31, 
						Знач Формат						= "plain", 
						Знач ИсправлятьИсходныйТекст	= Ложь, 
						Знач СообщатьОбОшибках			= Истина,
						Знач Словарь					= "",
						Знач МинДлинаСлова				= 0) Экспорт
	// Откидываю все лишнее
	// и не мучаю веб сервис по напрасну.
	Если ТипЗнч(Текст) <> Тип("Строка") Или СтрДлина(Текст)>10000 Тогда
		Сообщение		= Новый СообщениеПользователю;
		Сообщение.Текст	= "Проверьте передаваемый на проверку текст. Он "
		+ ?(ТипЗнч(Текст)<>Тип("Строка"), "не является строкой.", "слишком длинный.");
		Сообщение.Сообщить();
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(Текст) = Тип("Строка") И ПустаяСтрока(Текст) Тогда
		Возврат Новый Структура("БезОшибок,КоличествоОшибок,Ошибки,ИсходныйТекст,ИсправленныйТекст,ШаблонТекста",
		Истина, 0, Новый Массив, Текст, Текст, Текст);
	КонецЕсли;
	
	Попытка
		// Задаю соответсвие для расшифровки кодов ошибок
		КодыОшибок	= Новый Соответствие;
		КодыОшибок.Вставить(1, "Слова нет в словаре");
		КодыОшибок.Вставить(2, "Повтор слова");
		КодыОшибок.Вставить(3, "Неверное употребление прописных и строчных букв");
		КодыОшибок.Вставить(4, "Текст содержит слишком много ошибок");

		// Подключение к Web сервису через SOAP-интерфейс 
		// !!! НЕ ИСПОЛЬЗУЮ, ТК НЕЛЬЗЯ ИСПОЛЬЗОВАТЬ ВСЕ ПАРАМЕТРЫ ЗАПРОСА ИЗ ЗА ОГРАНИЧЕНИЯ ПЛАТФОРМЫ!!!
		//Определения	= Новый WSОпределения("http://speller.yandex.net/services/spellservice?WSDL",,,Неопределено,300);	
		//Прокси		= Новый WSПрокси(Определения, "http://speller.yandex.net/services/spellservice", 
		//									"SpellService", "SpellServiceSoap", Неопределено, 300);
		//Данные		= Прокси.checkText(Текст);
		
		// Долблю 10 раз HTTP Get запрос в надежде получить ответ
		Для Счетчик = 1 По 10 Цикл
			//ТекстНаПроверку	= СтрЗаменить(Текст, Символы.Таб,	"%20");
			//ТекстНаПроверку	= СтрЗаменить(ТекстНаПроверку, " ", "%20");
			ТекстНаПроверку	= КодироватьСтроку(Текст, СпособКодированияСтроки.КодировкаURL);
			
			URL			= СтрШаблон("services/spellservice/checkText?text=%1&lang=%2&options=%3&format=%4", ТекстНаПроверку, СокрЛП(Язык), СокрЛП(Опции), СокрЛП(Формат));
			//Заголовки	= Новый Соответствие();
			//Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8");
			//Заголовки.Вставить("Accept-Encoding", "gzip, deflate");
			//Заголовки.Вставить("Accept-Language", "en-US,en;q=0.8,ru;q=0.6");
			//Заголовки.Вставить("Cache-Control", "max-age=0");
			//Заголовки.Вставить("Connection", "keep-alive");
			//Заголовки.Вставить("Host", "speller.yandex.net");
			//Заголовки.Вставить("Upgrade-Insecure-Requests", "1");			
			//Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36");
			//Заголовки.Вставить("X-Compress", "null");			
			
			HTTPСоединение	= Новый HTTPСоединение("speller.yandex.net", 80, , , , Счетчик*10);
			//HTTPСоединение= Новый HTTPСоединение("speller.yandex.net", 443,,,, Счетчик*10, Новый ЗащищенноеСоединениеOpenSSL());
			HTTPЗапрос		= Новый HTTPЗапрос(URL); //, Заголовки);		
			HTTPОтвет		= HTTPСоединение.Получить(HTTPЗапрос);
			Если HTTPОтвет.КодСостояния	= 200 Тогда Прервать КонецЕсли;			
		КонецЦикла; // Для Счетчик = 1 По 10 
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			Сообщение		= Новый СообщениеПользователю;
			Сообщение.Текст	= "Не удалось соединиться с сервисом yandex.speller.
							|Проверьте подключение к интернету.";
			Сообщение.Сообщить();
			Возврат Неопределено;			
		КонецЕсли; // Если HTTPОтвет.КодСостояния <> 200
		
		// Перебираю XML ответ
		ЧтениеXML		= Новый ЧтениеXML();    
		ЧтениеXML.УстановитьСтроку(HttpОтвет.ПолучитьТелоКакСтроку());     
		ПостроительDOM	= Новый ПостроительDOM;
		Попытка 
	    	ДокументDOM		= ПостроительDOM.Прочитать(ЧтениеXML);
		Исключение
			Сообщение		= Новый СообщениеПользователю;
			Сообщение.Текст	= "Не возможно прочитать ответ сервиса Yandex Speller.
							|Возможно битая кодировка." + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;						
		КонецПопытки;
		Ошибки			= Новый Массив;
		ОшибкиСтрокой	= "";    
		ЭлементыError	= ДокументDOM.ПолучитьЭлементыПоИмени("Error");
		сАтрибутов		= Новый Соответствие;
		Для Каждого Атрибут Из СтрРазделить("cod:КодОшибки;pos:ПозицияСлова;row:НомерСтроки;col:НомерСтолбца;len:ДлинаСлова", ";", Ложь) Цикл
			сАтрибутов.Вставить(Лев(Атрибут, 3), Сред(Атрибут, 5));	
		КонецЦикла; // Для Каждого Атрибут Из СтрРазделить()
		ДЛЯ КАЖДОГО ЭлементError ИЗ ЭлементыError ЦИКЛ
			Попытка
				Ошибка		= Новый Структура("Подсказки", Новый Массив);
				Для Каждого Атрибут Из ЭлементError.Атрибуты Цикл
				Ошибка.Вставить(сАтрибутов.Получить(Лев(Атрибут.Имя, 3)), Число(Атрибут.Значение));
				КонецЦикла; // Для Каждого Атрибут Из ЭлементError.Атрибуты
				Ошибка.Вставить("ОписаниеОшибки",	КодыОшибок.Получить(Ошибка.КодОшибки)); 
				Слова		= ЭлементError.ПолучитьЭлементыПоИмени("word");
				Если Не Слова.Количество() Тогда Продолжить КонецЕсли;
				Ошибка.Вставить("Слово", Слова[0].ТекстовоеСодержимое);
				ОшибкиСтрокой	= СтрШаблон("%1,""%2""", ОшибкиСтрокой, СтрЗаменить(Ошибка.Слово, """", ""));
				Подсказки	= ЭлементError.ПолучитьЭлементыПоИмени("s");
				Для Каждого Подсказка Из Подсказки Цикл
				Ошибка.Подсказки.Добавить(Подсказка.ТекстовоеСодержимое);
				КонецЦикла; // Для Каждого Подсказка Из Подсказки    
				Ошибки.Добавить(Ошибка);
			Исключение
				Сообщение		= Новый СообщениеПользователю;
				Сообщение.Текст	= "Ошибка при разборе ответа от сервера. Итерация будет пропущена." + Символы.ПС + ОписаниеОшибки();
				Сообщение.Сообщить();
			КонецПопытки;
		КОНЕЦЦИКЛА; // ДЛЯ КАЖДОГО ЭлементError ИЗ ЭлементыError
		ОшибкиСтрокой	= Сред(ОшибкиСтрокой, 2);
		
		// Немного прибираюсь за собой
		Заголовки = Неопределено; HTTPСоединение = Неопределено; 
		HTTPЗапрос = Неопределено; HTTPОтвет = Неопределено;
		ЧтениеXML.Закрыть(); ЧтениеXML = Неопределено; ДокументDOM = Неопределено; 
		ПостроительDOM = Неопределено; сАтрибутов = Неопределено;
				
		// Если надо найти слова-исключения из справочника
		ЕСЛИ ТипЗнч(Словарь) = Тип("Строка") И СтрДлина(ОшибкиСтрокой) И СтрДлина(Словарь) И СтрНачинаетсяС(Словарь, "Справочник.") ТОГДА 		
			#Если НаСервере Тогда				
			Если Метаданные.Справочники.Найти(Сред(Словарь, 12)) <> Неопределено Тогда				
				Запрос	= Новый Запрос("
				|ВЫБРАТЬ Наименование
				|ИЗ "+Словарь+"
				|ГДЕ Наименование В("+ОшибкиСтрокой+")");
				Словарь	= Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Наименование");
			КонецЕсли;
			#КонецЕсли
		ИНАЧЕЕСЛИ ТипЗнч(Словарь) = Тип("Строка") ТОГДА // Если словарь передан строкой 
			Словарь = СтрРазделить(Словарь, ";", Ложь);
		КОНЕЦЕСЛИ; // ЕСЛИ ТипЗнч(Словарь) = Тип("Булево") И Словарь
		
		// Удаляю из ошибок короткие и словарные слова
		КолвоЭлтовКоллекции	= Ошибки.Количество(); 
		ДЛЯ оИндекс = 1 ПО КолвоЭлтовКоллекции ЦИКЛ
			Индекс		= КолвоЭлтовКоллекции - оИндекс;
			Ошибка		= Ошибки[Индекс];
			// Если слово слишком короткое, чтоб быть ошибкой
			Если МинДлинаСлова И Ошибка.ДлинаСлова < МинДлинаСлова Тогда 
				Ошибки.Удалить(Индекс);					
			ИначеЕсли ТипЗнч(Словарь) = Тип("Массив") Тогда
				// Если слово является словарным (исключением)
	
				Для Каждого Слово Из Словарь Цикл
					Если СокрЛП(Нрег(Ошибка.Слово)) = СокрЛП(Нрег(Слово)) Тогда
						Ошибки.Удалить(Индекс); Прервать; 
					КонецЕсли; // Если СокрЛП(Нрег(Ошибка.word)) = СокрЛП(Нрег(Слово))
				КонецЦикла; // Для Каждого Слово Из Словарь 		
			КонецЕсли; // Если Не МинДлинаСлова И Ошибка.len < МинДлинаСлова
		КОНЕЦЦИКЛА; // ДЛЯ оИндекс = 1 ПО КолвоЭлтовКоллекции
		
		// Перебираю все ошибки
		ИсходныйТекст		= Текст;
		ИсправленныйТекст	= Текст;
		ДЛЯ КАЖДОГО Ошибка ИЗ Ошибки ЦИКЛ
			Подсказки	= "";
			// Перебираю все доступные подсказки 
			// для уведомления пользователя о доступных вариантах
			Для Каждого Подсказка Из Ошибка.Подсказки Цикл
				Подсказки	= Подсказки + Подсказка + ", ";
			КонецЦикла;
			Подсказки	= Лев(Подсказки, СтрДлина(Подсказки)-2);
			Если Ошибка.Подсказки.Количество() Тогда
				ИсправленныйТекст	= СтрЗаменить(ИсправленныйТекст, Ошибка.Слово, Ошибка.Подсказки[0]); 	
			КонецЕсли; // Если Ошибка.Подсказки.Количество()			
			Если СообщатьОбОшибках Тогда
				// Непосредственно вывод по ошибке
				Сообщение		= Новый СообщениеПользователю;
				Сообщение.Текст	= СтрШаблон("Ошибка в слове: ""%1"". %2. %3", 
									Ошибка.Слово, 
									Ошибка.ОписаниеОшибки,
									?(Ошибка.Подсказки.Количество(), 
										Символы.ПС + "Возможно Вы хотели написать: " + Подсказки, ""));
				Сообщение.Сообщить();
			КонецЕсли; // Если СообщатьОбОшибках
		КОНЕЦЦИКЛА; // ДЛЯ КАЖДОГО Ошибка ИЗ Данные.error
		
		Если ИсправлятьИсходныйТекст Тогда Текст = ИсправленныйТекст КонецЕсли;
		
		// Создаю шаблон строки с ошибками
		// где индекс массива ошибок соответсвует тегу <err!>Индекс</err!>
		ШаблонТекста	= ИсходныйТекст;
		КолвоЭлтовКоллекции	= Ошибки.Количество(); 
		Для оИндекс = 1 По КолвоЭлтовКоллекции Цикл
			Индекс			= КолвоЭлтовКоллекции - оИндекс;
			Ошибка			= Ошибки[Индекс];
			ШаблонТекста	= СтрШаблон("%1<err!>%2</err!>%3",
							Лев(ШаблонТекста, Ошибка.ПозицияСлова), Индекс, Сред(ШаблонТекста, Ошибка.ПозицияСлова+Ошибка.ДлинаСлова+1));			
		КонецЦикла; // Для оИндекс = 1 По КолвоЭлтовКоллекции
		
		Возврат Новый Структура("БезОшибок,КоличествоОшибок,Ошибки,ИсходныйТекст,ИсправленныйТекст,ШаблонТекста",
								Не Булево(Ошибки.Количество()), Ошибки.Количество(), Ошибки, ИсходныйТекст, ИсправленныйТекст, ШаблонТекста);			
	Исключение
		Сообщение		= Новый СообщениеПользователю;
		Сообщение.Текст	= "Не удалось проверить орфографию." + Символы.ПС + ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
КонецФункции // YandexSpeller()
// ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~
#КонецОбласти

#Область Исправить_номенклатуру

Функция ПроверитьСправочник(Знач Справочник, ДиапазонС=0, ДиапазонПо=0) Экспорт
	мИсправлений	= Новый Массив;		
	Запрос	= Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ?(ДиапазонПо=0, "", "ПЕРВЫЕ " + Формат(ДиапазонПо, "ЧГ=0")) + " Ссылка, Наименование ИЗ " + Справочник + " ГДЕ Не ПометкаУдаления");
	Выборка	= Запрос.Выполнить().Выбрать();
	
	Счетчик	= 0;
	Пока Выборка.Следующий() Цикл
		Счетчик		= Счетчик + 1;
		Если Счетчик < ДиапазонС Тогда Продолжить КонецЕсли; 
		Результат	= YandexSpeller(Выборка.Наименование,,,,,Ложь,,4);
		Если Результат = Неопределено Или Результат.БезОшибок Тогда Продолжить КонецЕсли;
		Ошибки	= "";
		Для Каждого Ошибка Из Результат.Ошибки Цикл
			Ошибки	= СтрШаблон("%1%4""%2"" - %3", Ошибки, Ошибка.Слово, Ошибка.ОписаниеОшибки, ?(Ошибка=Результат.Ошибки[0], "", Символы.ПС)); 
		КонецЦикла; // Для Каждого Ошибка Из Результат.Ошибки
		мИсправлений.Добавить(Новый Структура("Ссылка,Наименование,Исправление,Ошибки", 
								Выборка.Ссылка, Выборка.Наименование, Результат.ИсправленныйТекст, Ошибки));
	КонецЦикла; // Пока Выборка.Следующий()
							
	Возврат мИсправлений;	
КонецФункции // ИсправитьНоменклатуру()

#КонецОбласти