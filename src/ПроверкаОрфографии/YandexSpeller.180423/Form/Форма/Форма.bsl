#Область Описание_использования
// В форму могут быть переданы следующие параметры (структурой):
//	Текст (строка)					-	Текст на проверку (обязателен, иначе не имеет смысла)
//	Язык (строка)					-	Языки проверки (перечисляются через запятую).
//										Возможные значения:
//											ru – русский;
//											uk – украинский;
//											en – английский.
//										По умолчанию: "ru,en"
//	Формат (строка)					-	Формат проверяемого текста.
//										Возможные значения:
//											plain - текст без разметки (значение по умолчанию);
//											html - HTML-текст.
//	МинДлинаСлова (число)			-	Минимальная длина слова подлежащего проверке.
//										По умолчанию 0 (проверять все слова).
//	Словарь (строка)				-	Если заданы метаданные словаря (вида: "Справочник.Словарь"), 
//										то будут исключаться из ошибочных слова содержащиеся в наименованиях справочника "Словарь".
//										Если передана строка с разделителями ";", то вместо справочника словаря будет использоваться она.
//										По умолчанию пустая строка.
//	Опции (число)					-	Опции Яндекс.Спеллера.
//										Значением параметра является сумма значений требуемых опций,
//										см. https://tech.yandex.ru/speller/doc/dg/reference/speller-options-docpage/
//										Например, Опции = 5 - это сумма опций IGNORE_UPPERCASE и IGNORE_URLS.
//										По умолчанию Опции = 31 (IGNORE_UPPERCASE, IGNORE_DIGITS, IGNORE_URLS, FIND_REPEAT_WORDS, IGNORE_LATIN).
//	ЗакрытьЕслиБезОшибок (булево)	-	Если при проверке не будет обнаружено ошибок - форма будет автоматически закрыта. 
//
// Форма возвращает либо Неопределено (отказ от изменений), либо Структуру состоящую из:
//	Текст (строка)				-	Подкоректированый текст
//	БезОшибок (булево)			-	Истина - не осталось ошибок, Ложь - некоторые ошибки были проигнорированы
//	КоличествоОшибок (число)	-	Количество проигнорированых ошибок
#КонецОбласти

#Область Пример_использования
//&НаКлиенте
//Процедура ПроверитьОрфографию(Команда)
//	СтрокаНаПроверку	= "Мамо мыла раму.";
//	Оповещение			= Новый ОписаниеОповещения("ПослеПроверкиОрфографии", ЭтаФорма, СтрокаНаПроверку); 
//	П					= Новый Структура("Текст,Язык,Формат,МинДлинаСлова,Словарь,Опции,ЗакрытьЕслиБезОшибок",
//											СтрокаНаПроверку, "ru,en", "plain", 0, "", 31, Истина);
//	ОткрытьФорму("Обработка.ПроверкаОрфографии.Форма", П, ЭтаФорма, Истина, , , Оповещение); 	
//КонецПроцедуры // ПроверитьОрфографию()
//
//&НаКлиенте
//Процедура ПослеПроверкиОрфографии(РезультатЗакрытия, СтрокаНаПроверку) Экспорт
//	Если РезультатЗакрытия <> Неопределено Тогда
//		ПоказатьПредупреждение(,СтрШаблон("Проверили орфографию и исправили
//								|""%1""
//								|
//								|на
//								|
//								|""%2"".%3", 
//								СтрокаНаПроверку, 
//								РезультатЗакрытия.Текст, 
//								?(РезультатЗакрытия.БезОшибок, 
//									"",
//									Символы.ПС + Символы.ПС + ЧислоПрописью(РезультатЗакрытия.КоличествоОшибок, "Л = ru_RU", "ошибка, ошибки, ошибок, ж,,,,,0"))), 
//								60);
//	КонецЕсли; // Если РезультатЗакрытия <> Неопределено
//КонецПроцедуры // ПослеПроверкиОрфографии() Экспорт
#КонецОбласти

#Область При_открытии

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьЗначенияПоУмолчанию();
	ПроверитьОрфографиюНаСервере();
	ЗаполнитьСписокСправочников();
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если БезОшибок И ЗакрытьЕслиБезОшибок Тогда
		ЭтаФорма.Закрыть(Новый Структура("Текст,БезОшибок,КоличествоОшибок",Текст,БезОшибок,КоличествоОшибок));
		Возврат;
	КонецЕсли; // Если БезОшибок И ЗакрытьЕслиБезОшибок
	Если ЭтаФорма.ВладелецФормы = Неопределено Тогда
		Элементы.Принять.Видимость	= Ложь;
		Элементы.Отменить.Видимость	= Ложь;
	Иначе
		Элементы.ГруппаПроверитьСправочник.Видимость	= Ложь;
	КонецЕсли; // Если ЭтаФорма.ВладелецФормы = Неопределено
	СловарьПриИзменении(Неопределено);	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	// Заполняю основные реквизиты
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, "Текст,Язык,Формат,МинДлинаСлова,Словарь,Опции,ЗакрытьЕслиБезОшибок");
	Опции	= ?(Опции	= 0,	31,			Опции);
	Язык	= ?(Язык	= "",	"ru,en",	Язык);
	Формат	= ?(Формат	= "",	"plain",	Формат);
	КоличествоОшибок	= 0;
	БезОшибок			= Ложь;
	
	// Заполняю флажки опций
	Опции(); 
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

Процедура ЗаполнитьСписокСправочников()
	СписокСправочников.Очистить();
	Для Каждого НазваниеСправочника Из Метаданные.Справочники Цикл
		Если НазваниеСправочника.ДлинаНаименования Тогда  
			СписокСправочников.Добавить("Справочник." + НазваниеСправочника.Имя, НазваниеСправочника.Имя, , БиблиотекаКартинок.Справочник);
		КонецЕсли; // Если Справочник.ДлинаНаименования	
	КонецЦикла; // Для Каждого Справочник Из Справочники	
КонецПроцедуры // ЗаполнитьСписокСправочников() 

#КонецОбласти

#Область Проверка_орфографии

&НаКлиенте
Процедура ПроверитьОрфографию(Команда) Экспорт
	ПроверитьОрфографиюНаСервере();
КонецПроцедуры // ПроверитьОрфографию() Экспорт

&НаСервере
Процедура ПроверитьОрфографиюНаСервере()
	Опции(Ложь);
	МодульОбъекта		= РеквизитФормыВЗначение("Объект");
	РезультатПроверки	= МодульОбъекта.YandexSpeller(Текст, Язык, Опции, Формат, Ложь, Ложь, Словарь, МинДлинаСлова);
	Если РезультатПроверки = Неопределено Тогда
		HTML				= "";
		КоличествоОшибок	= 0;
		БезОшибок			= Истина;
	Иначе		 
		СобратьHTML(HTML, РезультатПроверки);
		КоличествоОшибок	= РезультатПроверки.КоличествоОшибок;
		БезОшибок			= РезультатПроверки.БезОшибок;	
	КонецЕсли; // Если РезультатПроверки = Неопределено
КонецПроцедуры // ПроверитьОрфографиюНаСервере()

#КонецОбласти

#Область HTML
&НаКлиентеНаСервереБезКонтекста
Процедура СобратьHTML(HTML, Знач РезультатПроверки)
	HTML	= "<!DOCTYPE HTML>
	|<HTML lang='ru-RU'>
	|<HEAD>
	|    <meta charset='utf-8'>
	|    <meta http-equiv='X-UA-Compatible' content='IE=11'>
	|    <style>
	|        html {
	|            overflow:  hidden;
	|            font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif, 'Times New Roman', Georgia, serif;
	|            font-size: 12px;
	|            font-style: normal;
	|            font-variant: normal;
	|            font-weight: 400;
	|            line-height: 12px;
	|            font-stretch: condensed;
	|            letter-spacing: -1px;
	|        }
	|        select {
	|            font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif, 'Times New Roman', Georgia, serif;
	|            font-size: 12px;
	|            font-style: normal;
	|            font-variant: normal;
	|            font-weight: 400;
	|            line-height: 12px;
	|            font-stretch: condensed;
	|            letter-spacing: inherit;
	|            border-radius: 10px;
	|            -webkit-border-radius: 10px;
	|            -moz-border-radius: 10px;
	|            padding: 0px 3px;
	|            border: solid 2px;
	|            line-height: 1;
	|            -webkit-appearance: none;
	|            -moz-appearance: none;
	|            appearance: none;
	|            text-overflow: ''; /* this is important! */
	|            border-bottom: 3px dashed black;
	|            background: orange;
	|        }
	|        form {
	|            white-space: pre-wrap;
	|        }
	|        select::-ms-expand {
	|            display: none;
	|        }
	|        select:hover {
	|            cursor: pointer;
	|        }
	|        option {
	|            background: greenyellow;
	|        }
	|        .badword {
	|            background: orange !important;
	|        }
	|        ::selection {
	|            color: red;
	|            background: yellow;
	|        }
	|    </style>
	|    <script>
	|        function changeColor(elem){
	|            if (elem.options[elem.selectedIndex].className=='badword') {
	|                elem.style.background  = 'orange';
	|            } else {
	|                elem.style.background  = 'greenyellow';
	|            }
	|            elem.blur();
	|        }
	|    </script>
	|</HEAD>
	|<BODY>
	|<form><pre>" + РезультатПроверки.ШаблонТекста + "</pre></form>
	|</BODY>
	|</HTML>";
	Ошибки		= РезультатПроверки.Ошибки;
	Для Индекс = 0 По Ошибки.ВГраница() Цикл
		Ошибка		= Ошибки[Индекс];
		ТекстОшибки	= СтрШаблон("<select id='%1' class='err' title='%2' onchange='changeColor(this)'><option class='badword'>%3</option>", Индекс, Ошибка.ОписаниеОшибки, Ошибка.Слово);
		Для Каждого Подсказка Из Ошибка.Подсказки Цикл
			ТекстОшибки	= СтрШаблон("%1<option>%2</option>", ТекстОшибки, Подсказка); 	
		КонецЦикла; // Для Каждого Подсказка Из Ошибка.Подсказки
		ТекстОшибки	= ТекстОшибки + "</select>";		
		HTML	= СтрЗаменить(HTML, "<err!>"+Индекс+"</err!>", ТекстОшибки);				
	КонецЦикла; // Для Индекс = 0 По Ошибки.ВГраница()
КонецПроцедуры // СобратьHTML()

&НаКлиенте
Функция РазобратьHTML(Знач document)
	arrErr	= Новый Массив; // Массив с неисправленными ошибками
	txt		= "";
	pre		= document.getElementsByTagName("pre");
	Если Не pre.length Или Не pre.item(0).childNodes.length Тогда 
		Возврат Новый Структура("Текст,МассивОшибок", txt, arrErr) 
	КонецЕсли; // Если Не pre.length Или Не pre.item(0).childNodes.length	
	ДЛЯ counter = 0 ПО pre.item(0).childNodes.length-1 ЦИКЛ
		item	= pre.item(0).childNodes.item(counter);
		Если item.nodeName = "#text" И item.nodeValue <> "" Тогда
			txt	= txt + item.nodeValue;
		ИначеЕсли item.className = "err" И item.value <> "" Тогда
			txt	= txt + item.value;
			Если item.firstChild.value = item.value Тогда arrErr.Добавить(item.value) КонецЕсли;
		ИначеЕсли item.className = "err" И item.ie9_value <> "" Тогда
			txt	= txt + item.ie9_value;
			Если item.firstChild.ie9_value = item.ie9_value Тогда arrErr.Добавить(item.ie9_value) КонецЕсли;
		КонецЕсли; // Если item.nodeName = "#text"
	КОНЕЦЦИКЛА; // ДЛЯ counter = 0 ПО pre.item(0).childNodes.length-1
	Возврат Новый Структура("Текст,МассивОшибок", txt, arrErr);
КонецФункции // РазобратьHTML()

#КонецОбласти

#Область Результат

&НаКлиенте
Процедура ЗакрытьФорму(Команда) Экспорт
	Если ТипЗнч(Команда) = Тип("КомандаФормы") И Команда.Имя = "Принять" Тогда
		РезультатHTML		= РазобратьHTML(Элементы.HTML.document);
		Текст				= РезультатHTML.Текст;
		КоличествоОшибок	= РезультатHTML.МассивОшибок.Количество();
		БезОшибок			= Не Булево(КоличествоОшибок);
		ЭтаФорма.Закрыть(Новый Структура("Текст,БезОшибок,КоличествоОшибок",Текст,БезОшибок,КоличествоОшибок));
	Иначе
		ЭтаФорма.Закрыть(Неопределено);
	КонецЕсли;
КонецПроцедуры // ЗакрытьФорму() Экспорт

&НаКлиенте
Процедура ДобавитьВСловарь(Команда) Экспорт
	Если Не СтрНачинаетсяС(Словарь, "Справочник.") Тогда
		ПоказатьПредупреждение(,"Не выбран словарь.", 10);
		Возврат;	
	КонецЕсли; // Если Не СтрНачинаетсяС(Словарь, "Справочник.")
	мОшибок		= РазобратьHTML(Элементы.HTML.document).МассивОшибок;
	НазваниеСправочника	= Сред(Словарь, 12);
	Если Не мОшибок.Количество() Тогда
		ПоказатьПредупреждение(,"Нечего добавлять, тк в данном тексте нет неисправленных ошибок.", 10);
		Возврат;
	КонецЕсли; // Если Не МассивОшибок.Количество()
	ДЛЯ КАЖДОГО Ошибка ИЗ мОшибок ЦИКЛ 
		Оповещение = Новый ОписаниеОповещения("ДобавитьВСловарьОтвет", ЭтаФорма, ТРег(Ошибка));
		ПоказатьВопрос(Оповещение, СтрШаблон(
					"Хотите добавить элемент ""%1"" в справочник ""%2""?", 
						ТРег(Ошибка), 
						НазваниеСправочника),
					РежимДиалогаВопрос.ДаНет, 0);	
	КОНЕЦЦИКЛА; // ДЛЯ КАЖДОГО Ошибка ИЗ МассивОшибок
КонецПроцедуры // ДобавитьВСловарь() Экспорт

&НаКлиенте
Процедура ДобавитьВСловарьОтвет(Результат, Ошибка) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ДобавитьВСловарьНаСервере(Сред(Словарь, 12), Ошибка);		
    КонецЕсли;
КонецПроцедуры // ДобавитьВСловарьОтвет() Экспорт

&НаСервереБезКонтекста
Процедура ДобавитьВСловарьНаСервере(Знач Справочник, Знач Ошибка)
	Если Метаданные.Справочники.Найти(Справочник) = Неопределено Тогда
		Сообщение		= Новый СообщениеПользователю;
		Сообщение.Текст	= "Справочника """ + Справочник + """ не существует!";
		Сообщение.Сообщить();
		Возврат;                                                                                                                
	КонецЕсли; // Если Не Метаданные.Справочники.Найти(Справочник)
	Если Не ПравоДоступа("Insert", Метаданные.Справочники[Справочник]) Тогда		
		Сообщение		= Новый СообщениеПользователю;
		Сообщение.Текст	= "У вас не достаточно прав для создания элемента справочника """ + Справочник + """!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли; // Если Не ПравоДоступа("Insert", Метаданные.Справочники[Справочник])
	Попытка
		Спр					= Справочники[Справочник].НайтиПоНаименованию(Ошибка, Истина);
		Если Не Спр.Пустая() Тогда		
			Сообщение		= Новый СообщениеПользователю;
			Сообщение.Текст	= СтрШаблон("В справочнике ""%1"" уже существует элемент ""%2""!", Справочник, Ошибка);
			Сообщение.Сообщить();			
			Возврат;
		КонецЕсли; // Если Спр = Неопределено Или Спр.Пустая()		
		Спр					= Справочники[Справочник].СоздатьЭлемент();
		Спр.Наименование	= Ошибка;
		Спр.Записать();			
	Исключение
		Сообщение		= Новый СообщениеПользователю;
		Сообщение.Текст	= СтрШаблон("Элемент ""%1"" не был добавлен в справочник ""%2""!
		|%3", Ошибка, Справочник, ОписаниеОшибки());
		Сообщение.Сообщить();			
	КонецПопытки;		
КонецПроцедуры // ДобавитьВСловарьНаСервере()

#КонецОбласти

#Область Вспомогательные_функции
&НаСервере
Процедура Опции(Знач ЧислоВФлажки = Истина)
	мОпции	= "IGNORE_UPPERCASE=1;IGNORE_DIGITS=2;IGNORE_URLS=4;FIND_REPEAT_WORDS=8;IGNORE_LATIN=16;NO_SUGGEST=32;FLAG_LATIN=128;BY_WORDS=256;IGNORE_CAPITALIZATION=512;IGNORE_ROMAN_NUMERALS=2048";
	мОпции	= СтрРазделить(мОпции, ";", Ложь);
	ЕСЛИ ЧислоВФлажки ТОГДА
		// Заполняю флажки из числа
		Для оИндекс = 1 По мОпции.Количество() Цикл 
			Опция	= СтрРазделить(мОпции[мОпции.Количество()-оИндекс], "=", Ложь);
			Если Опция.Количество() <> 2 Тогда Продолжить КонецЕсли;
			Если Макс(Опции-Число(Опция[1]), 0) Тогда 
				ЭтаФорма[Опция[0]]	= Истина;
				Опции				= Опции - Число(Опция[1]);
			КонецЕсли; // Если Макс(Параметры.Опции-Число(Опция[1]), 0)
		КонецЦикла; // Для оИндекс = 1 По Опции.Количество()
	ИНАЧЕ
		// Заполняю число из флажков
		Опции	= 0;
		Для Индекс = 0 По мОпции.ВГраница() Цикл
			Опция	= СтрРазделить(мОпции[Индекс], "=", Ложь);
			Если Опция.Количество() <> 2 Тогда Продолжить КонецЕсли;
			Опции	= Опции + ?(ЭтаФорма[Опция[0]], Число(Опция[1]), 0);
		КонецЦикла;		
	КОНЕЦЕСЛИ; // ЕСЛИ ЧислоВФлажки
КонецПроцедуры // Опции()

&НаКлиенте
Процедура УстановитьЗначенияПоУмолчаниюНаКлиенте(Команда)
	УстановитьЗначенияПоУмолчанию();
КонецПроцедуры // УстановитьЗначенияПоУмолчаниюНаКлиенте()

&НаКлиенте
Процедура СловарьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	Оповещение				= Новый ОписаниеОповещения("СловарьКонецВыбора", ЭтаФорма);
	ПоказатьВыборИзМеню(Оповещение, СписокСправочников, Элемент);
КонецПроцедуры // СловарьНачалоВыбора()

&НаКлиенте
Процедура СловарьКонецВыбора(ВыбранныйЭлемент, Параметры) Экспорт
	Если ВыбранныйЭлемент<>Неопределено Тогда
		Словарь	= ВыбранныйЭлемент.Значение;
		СловарьПриИзменении(Неопределено);
	КонецЕсли; // Если ВыбранныйЭлемент<>Неопределено
КонецПроцедуры // СловарьКонецВыбора() Экспорт

&НаКлиенте
Процедура СловарьПриИзменении(Элемент)
	Элементы.ДобавитьВСловарь.Доступность	= СтрНачинаетсяС(Словарь, "Справочник.");
КонецПроцедуры // СловарьПриИзменении()

#КонецОбласти

#Область Исправить_справочник

&НаКлиенте
Процедура СправочникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	Оповещение				= Новый ОписаниеОповещения("СправочникКонецВыбора", ЭтаФорма);
	ПоказатьВыборИзМеню(Оповещение, СписокСправочников, Элемент);
КонецПроцедуры // СправочникНачалоВыбора()

&НаКлиенте
Процедура СправочникКонецВыбора(ВыбранныйЭлемент, Параметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Справочник	= ВыбранныйЭлемент.Значение;
	КонецЕсли; // Если ВыбранныйЭлемент<>Неопределено
КонецПроцедуры // СправочникКонецВыбора() Экспорт

&НаКлиенте
Процедура ПроверитьСправочник(Команда)
	Если ПустаяСтрока(Справочник) Или Не СтрНачинаетсяС(Справочник, "Справочник.") Тогда
		ПоказатьПредупреждение(,"Не выбран Справочник.", 10);
		Возврат;	
	КонецЕсли; // Если Не СтрНачинаетсяС(Справочник, "Справочник.")
	Если ДиапазонС >= ДиапазонПо Тогда
		ДиапазонС	= 0;
		ДиапазонПо	= 0;
	КонецЕсли; // Если ДиапазонС >= ДиапазонПо
	СписокОшибок.Очистить();
	мИсправлений	= ПроверитьСправочникНаСервере();
	Для Каждого Строка Из мИсправлений Цикл
		нСтр	= СписокОшибок.Добавить();
		ЗаполнитьЗначенияСвойств(нСтр, Строка, "Ссылка,Исправление,Ошибки,Наименование");
	КонецЦикла; // Для Каждого Исправление Из мИсправлений
КонецПроцедуры // ПроверитьСправочник()

&НаСервере
Функция ПроверитьСправочникНаСервере()
	МодульОбъекта	= РеквизитФормыВЗначение("Объект");
	Возврат	МодульОбъекта.ПроверитьСправочник(Справочник, ДиапазонС, ДиапазонПо);	
КонецФункции // ПроверитьСправочникНаСервере()

&НаКлиенте
Процедура ИсправитьСправочник(Команда)
	мНаИсправление	= СписокОшибок.НайтиСтроки(Новый Структура("Исправить", Истина));
	Если Не мНаИсправление.Количество() Тогда Возврат КонецЕсли;
	Режим			= РежимДиалогаВопрос.ДаНет;
	Оповещение		= Новый ОписаниеОповещения("ИсправитьСправочникПослеЗакрытияВопроса", ЭтаФорма, мНаИсправление);
	ПоказатьВопрос(Оповещение, СтрШаблон("Переименовать ""%1"" элементов справочника <<%2>>?", мНаИсправление.Количество(), ТипЗнч(мНаИсправление[0].Ссылка)), Режим, 0);		
КонецПроцедуры // ИсправитьСправочник()

&НаКлиенте
Процедура ИсправитьСправочникПослеЗакрытияВопроса(Результат, мНаИсправление) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда Возврат КонецЕсли;
	мОшибок	= Новый Массив;
	Для Каждого Строка Из мНаИсправление Цикл
		мОшибок.Добавить(Новый Структура("Ссылка,Исправление", Строка.Ссылка, Строка.Исправление));
	КонецЦикла; // Для Каждого Строка Из мНаИсправление
	ИсправитьСправочникИзТаблицыЗначений(мОшибок);
КонецПроцедуры // ИсправитьСправочникПослеЗакрытияВопроса()

&НаСервереБезКонтекста
Процедура ИсправитьСправочникИзТаблицыЗначений(мОшибок)
	Для Каждого Строка Из мОшибок Цикл
		Попытка
			Справочник				= Строка.Ссылка.ПолучитьОбъект();
			Справочник.Наименование	= Строка.Исправление;
			Справочник.Записать();
		Исключение
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
		КонецПопытки;
	КонецЦикла; // Для Каждого Строка Из мНаИсправление
КонецПроцедуры // ИсправитьСправочникИзТаблицыЗначений() 

&НаКлиенте
Процедура Диапазон(Команда)
	БылоДиапазонС	= ДиапазонС;
	БылоДиапазонПо	= ДиапазонПо;
	Если Команда.Имя = "ДиапазонСбросить" Тогда
		ДиапазонС	= 0;
		ДиапазонПо	= 0;
	ИначеЕсли Команда.Имя = "ДиапазонВперед" Тогда
		ДиапазонС	= БылоДиапазонПо;
		ДиапазонПо	= БылоДиапазонПо + ?(БылоДиапазонПо-БылоДиапазонС>0, БылоДиапазонПо-БылоДиапазонС, 100);		
	ИначеЕсли Команда.Имя = "ДиапазонНазад" Тогда		
		ДиапазонС	= Макс(0, БылоДиапазонС - ?(БылоДиапазонПо-БылоДиапазонС>0, БылоДиапазонПо-БылоДиапазонС, 100));
		ДиапазонПо	= БылоДиапазонС;		
	КонецЕсли;	
КонецПроцедуры // Диапазон()

&НаКлиенте
Процедура ДиапазонПриИзменении(Элемент)
	Если ДиапазонС = 0 Тогда Возврат КонецЕсли;
	ДиапазонС	= Макс(ДиапазонС, 0);
	ДиапазонПо	= Макс(ДиапазонС+1, ДиапазонПо, 0);	
КонецПроцедуры // ДиапазонПриИзменении()

&НаКлиенте
Процедура СписокОшибокИсправитьПриИзменении(Элемент)
	тДанные	= Элементы.СписокОшибок.ТекущиеДанные;
	Если тДанные.Наименование = тДанные.Исправление Или ПустаяСтрока(тДанные.Исправление) Тогда
		тДанные.Исправить	= Ложь;
		ПоказатьПредупреждение(, "Сначало заполните текст исправления для элемента <<" + тДанные.Наименование + ">>.");
	КонецЕсли; // Если тДанные.Наименование = тДанные.Исправление Или ПустаяСтрока(тДанные.Исправление)
КонецПроцедуры // СписокОшибокИсправитьПриИзменении()

#КонецОбласти